#!/usr/bin/env python
"""
Script de inicio para el Sistema de Gesti√≥n de Horas Django
"""

import os
import sys
import socket
import subprocess
import webbrowser
from pathlib import Path

def find_available_port(start_port=8000, max_port=8010):
    """Encuentra un puerto disponible"""
    for port in range(start_port, max_port + 1):
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.bind(('127.0.0.1', port))
                return port
        except OSError:
            continue
    return None

def check_virtual_env():
    """Verifica si el entorno virtual est√° activado"""
    return hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix)

def main():
    print("=" * 60)
    print("üöÄ SISTEMA DE GESTI√ìN DE HORAS - DJANGO")
    print("=" * 60)
    
    # Verificar entorno virtual
    if not check_virtual_env():
        print("‚ö†Ô∏è  ADVERTENCIA: No se detect√≥ un entorno virtual activado")
        print("   Ejecuta: source venv/bin/activate")
        print()
    
    # Encontrar puerto disponible
    port = find_available_port()
    if not port:
        print("No se pudo encontrar un puerto disponible")
        return
    
    # URLs importantes
    server_url = f"http://127.0.0.1:{port}"
    admin_url = f"{server_url}/admin/"
    
    print(f"üåê Servidor iniciando en: {server_url}")
    print(f"üîß Panel Admin en: {admin_url}")
    print()
    
    # Informaci√≥n de usuarios
    print("üë§ USUARIOS DE PRUEBA:")
    print("   ‚Ä¢ admin / admin123 (Superusuario)")
    print("   ‚Ä¢ demo1 / demo123 (Juan P√©rez)")
    print("   ‚Ä¢ demo2 / demo123 (Mar√≠a Gonz√°lez)")
    print()
    
    # Caracter√≠sticas del sistema
    print("‚ú® CARACTER√çSTICAS PRINCIPALES:")
    print("   ‚Ä¢ Dashboard interactivo con gr√°ficos")
    print("   ‚Ä¢ CRUD completo de proyectos")
    print("   ‚Ä¢ Gesti√≥n avanzada de horas con slider")
    print("   ‚Ä¢ Tipos de tarea (Tarea/Reuni√≥n)")
    print("   ‚Ä¢ Calendario visual con estados")
    print("   ‚Ä¢ Filtros avanzados por fecha, proyecto y tipo")
    print("   ‚Ä¢ Validaciones inteligentes (fines de semana, feriados)")
    print("   ‚Ä¢ Sistema de per√≠odos con activaci√≥n exclusiva")
    print("   ‚Ä¢ Exportaci√≥n a CSV/Excel")
    print("   ‚Ä¢ Panel de administraci√≥n Django completo")
    print("   ‚Ä¢ Autenticaci√≥n multiusuario con perfiles")
    print("   ‚Ä¢ Datos de demostraci√≥n incluidos")
    print()
    
    print("üéØ FUNCIONALIDADES IMPLEMENTADAS:")
    print("   Autenticaci√≥n avanzada (multiusuario + roles)")
    print("   CRUD proyectos con filtros por a√±o")
    print("   Slider de horas (0.5h - 12h, incrementos 30min)")
    print("   Tipos de tarea con estad√≠sticas")
    print("   Selector de per√≠odo activo")
    print("   Validaciones en tiempo real")
    print("   Calendario interactivo")
    print("   Dashboard con gr√°ficos")
    print("   Exportaci√≥n configurable")
    print("   Admin interface completa")
    print("   Datos de prueba autom√°ticos")
    print()
    
    print("üîß COMANDOS √öTILES:")
    print(f"   ‚Ä¢ Crear superusuario: python manage.py createsuperuser")
    print(f"   ‚Ä¢ Generar datos demo: python manage.py setup_demo_data")
    print(f"   ‚Ä¢ Resetear datos: python manage.py setup_demo_data --reset")
    print(f"   ‚Ä¢ Migraciones: python manage.py makemigrations && python manage.py migrate")
    print()
    
    print("=" * 60)
    print("Presiona Ctrl+C para detener el servidor")
    print("=" * 60)
    
    try:
        # Abrir navegador autom√°ticamente
        print("üåê Abriendo navegador...")
        webbrowser.open(server_url)
        
        # Iniciar servidor Django
        os.system(f"python manage.py runserver 127.0.0.1:{port}")
        
    except KeyboardInterrupt:
        print("\n")
        print("=" * 60)
        print("üõë Servidor detenido")
        print("¬°Gracias por usar el Sistema de Gesti√≥n de Horas!")
        print("=" * 60)

if __name__ == "__main__":
    main()
